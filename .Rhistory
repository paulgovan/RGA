print(result)
# Plot the results with confidence bounds
plot_rga(times, failures, result)
devtools::load_all(".")
# Example usage:
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
# Print the results
print(result)
# Plot the results with confidence bounds
plot_rga(times, failures, result)
source("~/.active-rstudio-document")
# Calculate the confidence bounds for the predicted values
lower_predicted <- exp(result$lower_lambda) * times^result$lower_beta
upper_predicted <- exp(result$upper_lambda) * times^result$upper_beta
lower_predicted
upper_predicted
times
devtools::load_all(".")
source("~/Documents/WeibullR.rga/R/rga.R")
source("~/Documents/WeibullR.rga/R/plot_rga.R")
# Example usage:
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
# Print the results
print(result)
# Plot the results with confidence bounds
plot_rga(times, failures, result)
source("~/Documents/WeibullR.rga/R/plot_rga.R")
# Example usage:
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
# Print the results
print(result)
# Plot the results with confidence bounds
plot_rga(times, failures, result)
rm(list = c("plot_rga", "rga"))
devtools::load_all(".")
devtools::load_all(".")
result
# Example usage:
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
# Print the results
print(result)
# Plot the results with confidence bounds
plot_rga(times, failures, result)
source("~/Documents/WeibullR.rga/R/plot_rga.R")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
plot_rga(times, failures, result)
devtools::load_all(".")
rm(list = c("plot_rga"))
devtools::load_all(".")
devtools::load_all(".")
source("~/Documents/WeibullR.rga/R/duane_plot.R")
source("~/Documents/WeibullR.rga/R/duane_plot.R")
# Print the linear model summary for the Duane plot with MTBF
summary(fit)
source("~/Documents/WeibullR.rga/R/duane_plot.R")
# Print the linear model summary for the Duane plot with MTBF
summary(fit)
fit <- duane_plot_mtbf(times, failures)
fit <- duane_plot(times, failures)
usethis::use_pkgdown_github_pages()
pkgdown::build_site_github_pages()
install.packages("segmented")
source("~/Documents/WeibullR.rga/R/piecewise_Weibull.R")
help("predict")
source("~/Documents/WeibullR.rga/R/rga.R")
source("~/Documents/WeibullR.rga/R/plot_rga.R")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
print(result)
plot_rga(times, failures, result)
source("~/Documents/WeibullR.rga/R/plot_rga.R")
plot_rga(times, failures, result)
source("~/Documents/WeibullR.rga/R/plot_rga.R")
plot_rga(times, failures, result)
result <- rga(times, failures, model_type = "Piecewise Weibull NHPP")
install.packages("segmented")
source("~/Documents/WeibullR.rga/R/rga.R")
result <- rga(times, failures, model_type = "Piecewise Weibull NHPP")
source("~/Documents/WeibullR.rga/R/rga.R")
result <- rga(times, failures, model_type = "Piecewise Weibull NHPP")
result
plot_rga(times, failures, result)
lines(times, result$lower_bounds, col = "red", lty = 2)
lines(times, result$upper_bounds, col = "red", lty = 2)
result <- rga(times, failures, model_type = "Piecewise Weibull NHPP", conf_level = 0.5)
plot_rga(times, failures, result)
devtools::load_all(".")
rm(list = c("duane_plot", "plot_rga", "rga"))
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
usethis::use_testthat()
usethis::use_test("rga")
result
devtools::load_all(".")
times <- c(-100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
rga(times, failures)
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
rga(times, failures, conf_level = 1.5)
rga(times, failures, conf_level = -0.5)
usethis::use_test("plot-rga")
result
devtools::load_all(".")
devtools::load_all(".")
source("~/Documents/RGA/R/rga.R")
devtools::load_all(".")
rm(list = c("rga"))
devtools::load_all(".")
usethis::use_test("duane-plot")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
failures <- c(100, 200, 300, 400)
suspensions <- c(250, 350, 450)
# Combine failure and suspension times
all_times <- c(failures, suspensions)
all_types <- c(rep("Failure", length(failures)), rep("Suspension", length(suspensions)))
# Create a data frame
data <- data.frame(Time = all_times, Type = all_types)
# Sort the data by time
data <- data[order(data$Time), ]
data
# Filter out suspensions and create a cumulative failures column
data_filtered <- subset(data, Type == "Failure")
data_filtered$Failures <- seq_len(nrow(data_filtered))
# Calculate cumulative time
data_filtered$CumulativeTime <- cumsum(data_filtered$Time)
# Select relevant columns for output
result <- data_filtered[, c("CumulativeTime", "Failures")]
result
failure_times <- c(100, 200, 400)
suspension_times <- c(150, 250)
result <- convert_weibull_to_rga(failure_times, suspension_times)
failure_times <- c(100, 200, 400)
suspension_times <- c(150, 250)
result <- weibull_to_rga(failure_times, suspension_times)
print(result)
source("~/Documents/RGA/R/weibull_to_rga.R")
failure_times <- c(100, 200, 400)
suspension_times <- c(150, 250)
result <- weibull_to_rga(failure_times, suspension_times)
print(result)
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
fit <- duane_plot(times, failures)
summary(fit)
source("~/Documents/RGA/R/duane_plot.R")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
fit <- duane_plot(times, failures)
summary(fit)
source("~/Documents/RGA/R/duane_plot.R")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
fit <- duane_plot(times, failures)
summary(fit)
source("~/Documents/RGA/R/duane_plot.R")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
fit <- duane_plot(times, failures)
summary(fit)
source("~/Documents/RGA/R/duane_plot.R")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
fit <- duane_plot(times, failures)
summary(fit)
source("~/Documents/RGA/R/duane_plot.R")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
fit <- duane_plot(times, failures)
summary(fit)
source("~/Documents/RGA/R/plot_rga.R")
source("~/Documents/RGA/R/plot_rga.R")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
plot_rga(times, failures, result)
devtools::load_all(".")
rm(list = c("duane_plot", "plot_rga", "weibull_to_rga"))
devtools::load_all(".")
usethis::use_test("duane-plot")
devtools::load_all(".")
spelling::update_wordlist()
failures <- c(100, 200, 300, 400)
suspensions <- c(250, 350, 450)
# Combine failure and suspension times
all_times <- c(failures, suspensions)
all_types <- c(rep("Failure", length(failures)), rep("Suspension", length(suspensions)))
# Create a data frame
data <- data.frame(Time = all_times, Type = all_types)
# Sort the data by time
data <- data[order(data$Time), ]
# Calculate cumulative time considering both failures and suspensions
data$CumulativeTime <- cumsum(data$Time)
# Create a cumulative failure count, but only increment for failures
data$Failures <- cumsum(data$Type == "Failure")
# Filter out suspensions, keeping only failures in the final result
data_filtered <- subset(data, Type == "Failure")
# Select relevant columns for output
result <- data_filtered[, c("CumulativeTime", "Failures")]
devtools::load_all(".")
result
result <- rga(times, failures)
devtools::load_all(".")
result <- rga(times, failures)
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
print(result)
# Convert to cumulative failure times
cum_failures <- cumsum(failures)
cum_failures
devtools::load_all(".")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
print(result)
plot_rga(times, failures, result)
devtools::load_all(".")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
print(result)
result <- rga(times, failures, model_type = "Piecwise Weibull NHPP")
result <- rga(times, failures, model_type = "Piecewise Weibull NHPP")
# Convert to cumulative failure times
cum_failures <- cumsum(failures)
# Log-transform the data
log_times <- log(times)
log_cum_failures <- log(cum_failures)
# Fit a linear model to the log-transformed data
fit <- stats::lm(log_cum_failures ~ log_times)
# Apply the segmented package to detect change points
updated_fit <- segmented::segmented(fit, seg.Z = ~log_times)
# Extract the breakpoints (change points)
breakpoints <- updated_fit$psi[, "Est."]
# Calculate the Weibull parameters for each segment
slopes <- updated_fit$coefficients[2] / log_times
intercepts <- updated_fit$coefficients[1]
shape_parameters <- 1 / slopes
scale_parameters <- exp(intercepts)
# Calculate Beta (slope) and Lambda (intercept) for each segment
betas <- updated_fit$coefficients[2, ]
lambdas <- exp(updated_fit$coefficients[1, ])
updated_fit$coefficients
updated_fit
# Apply the segmented package to detect change points
updated_fit <- segmented::segmented(fit, seg.Z = ~log_times)
updated_fit
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
print(result$betas)
print(result$lambdas)
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures, "Piecewise Weibull NHPP")
devtools::load_all(".")
plot_rga(times, failures, result)
result
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures, "Piecewise Weibull NHPP")
print(result$betas)
print(result$lambdas)
plot_rga(times, failures, result)
result
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
fit <- duane_plot(times, failures)
summary(fit)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
failures <- c(100, 200, 300, 400)
suspensions <- c(250, 350, 450)
# Combine failure and suspension times
all_times <- c(failures, suspensions)
all_types <- c(rep("Failure", length(failures)), rep("Suspension", length(suspensions)))
# Create a data frame
data <- data.frame(Time = all_times, Type = all_types)
data
# Sort the data by time
data <- data[order(data$Time), ]
# Calculate cumulative time considering both failures and suspensions
data$CumulativeTime <- cumsum(data$Time)
# Create a cumulative failure count, but only increment for failures
data$Failures <- cumsum(data$Type == "Failure")
data
# Filter out suspensions, keeping only failures in the final result
data_filtered <- subset(data, Type == "Failure")
data_filtered
# Select relevant columns for output
result <- data_filtered[, c("CumulativeTime", "Failures")]
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
breakpoints <- 350
result <- rga(times, failures, model_type = "Piecewise Weibull NHPP", breakpoints = breakpoints)
devtools::load_all(".")
result <- rga(times, failures, model_type = "Piecewise Weibull NHPP", breakpoints = breakpoints)
plot_rga(times, failures, result)
result
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
breakpoints <- 350
result <- rga(times, failures, model_type = "Piecewise Weibull NHPP", breakpoints = breakpoints)
result <- rga(times, failures, model_type = "Piecewise Weibull NHPP")
result
plot_rga(times, failures, result)
result2 <- rga(times, failures, model_type = "Piecewise Weibull NHPP")
plot_rga(times, failures, result2)
devtools::load_all(".")
failures <- read.csv("~/Downloads/acid_gas_compressor.csv", sep="")
View(failures)
failures <- as.vector(failures)
failures
treat6mp <- read.csv("~/Downloads/treat6mp.csv")
View(treat6mp)
failures <- subset(failures, event == 1)
failures <- subset(treat6mp, event == 1)
failures
failures <- as.vector(failures$time)
failures
weibull_to_rga(failures)
data <- weibull_to_rga(failures)
failures <- data$Failures
time <- data$CumulativeTime
rga(time, failures)
result <- rga(time, failures)
plot_rga(time, failures, result)
failures
time
set.seed(123)
# Simulating failures for two periods: before and after a change point
times_before <- c(100, 200, 300, 400, 500)  # Times of failures before the change point
times_after <- c(600, 700, 800, 900, 1000)  # Times of failures after the change point
failures_before <- c(1, 2, 1, 1, 1)         # Failures before the change point
failures_after <- c(2, 3, 1, 2, 4)          # Failures after the change point
# Combine the data
times <- c(times_before, times_after)
failures <- c(failures_before, failures_after)
times
failures
times <- c(100, 200, 300, 400, 500, 600, 700, 800, 900, 1000)
failures <- c(1, 2, 1, 1, 1, 2, 3, 1, 2, 4)
breakpoints <- 400
result <- rga(times, failures, model_type = "Piecewise Weibull NHPP", breakpoints = breakpoints)
plot_rga(times, failures, result)
result
devtools::load_all(".")
devtools::load_all(".")
help(segmented)
# Convert to cumulative failure times
cum_failures <- cumsum(failures)
# Log-transform the data
log_times <- log(times)
log_cum_failures <- log(cum_failures)
# Fit a linear model to the log-transformed data
fit <- stats::lm(log_cum_failures ~ log_times)
# Apply the user-supplied breakpoints
segmented_fit <- segmented::segmented(fit, seg.Z = ~log_times, fixed.psi = log(breakpoints))
# Update the model fit with the user-supplied breakpoints
updated_fit <- segmented_fit
if (is.null(breakpoints)) {
# Apply the segmented package to detect change points
updated_fit <- segmented::segmented(fit, seg.Z = ~log_times)
# Extract the breakpoints (change points)
breakpoints <- updated_fit$psi[, "Est."]
} else {
# Apply the user-supplied breakpoints
segmented_fit <- segmented::segmented(fit, seg.Z = ~log_times, fixed.psi = log(breakpoints))
# Update the model fit with the user-supplied breakpoints
updated_fit <- segmented_fit
}
# Calculate the Weibull parameters for each segment
slopes <- updated_fit$coefficients[2] / log_times
intercepts <- updated_fit$coefficients[1]
shape_parameters <- 1 / slopes
scale_parameters <- exp(intercepts)
# Calculate Beta (slope) and Lambda (intercept) for each segment
betas <- updated_fit$coefficients[2]
lambdas <- exp(updated_fit$coefficients[1])
# Generate the fitted values and confidence intervals
fitted_values <- stats::predict(updated_fit)
conf_intervals <- stats::predict(updated_fit, interval = "confidence", level = conf_level)
conf_level = 0.95
conf_intervals <- stats::predict(updated_fit, interval = "confidence", level = conf_level)
lower_bounds <- exp(conf_intervals[, "lwr"])
upper_bounds <- exp(conf_intervals[, "upr"])
list(
model = updated_fit,
breakpoints = breakpoints,
fitted_values = exp(fitted_values),
lower_bounds = lower_bounds,
upper_bounds = upper_bounds,
shape_parameters = shape_parameters,
scale_parameters = scale_parameters,
betas = betas,
lambdas = lambdas
)
devtools::load_all(".")
usethis::use_pkgdown()
pkgdown::build_site_github_pages()
pkgdown::build_site_github_pages()
usethis::use_code_of_conduct()
usethis::use_code_of_conduct("paul.govan2@gmail.com")
devtools::check_win_devel()
devtools::load_all(".")
rdt(sample_size = 50, target = 0.95, conf_level = 0.90, dist_type = "weibull", shape = 1.5, scale = 200, plot = TRUE)
rdt(sample_size = 50, target = 0.95, conf_level = 0.90, dist_type = "weibull", shape = 1.5, scale = 200, plot = FALSE)
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
rdt(sample_size = 50, target = 0.95, conf_level = 0.90, dist_type = "weibull", shape = 1.5, scale = 200, plot = FALSE)
rdt(sample_size = 50, target = 0.95, conf_level = 0.90, dist_type = "weibull", shape = 1.5, scale = 200, plot = TRUE)
spelling::update_wordlist()
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
fit <- duane_plot(times, failures)
summary(fit)
devtools::load_all(".")
# Example usage of the rga function
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures, model_type = "Crow-AMSAA")
# Print the rga object
print(result)
# Example usage of the rga function
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures, model_type = "Crow-AMSAA")
# Print the rga object
print(result)
devtools::load_all(".")
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
plot_rga(result)
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
source("~/.active-rstudio-document")
result_exponential <- rdt(
sample_size = 100,
target = 0.90,
conf_level = 0.90,
target_time = 100,
dist_type = "exponential",
plot = FALSE
)
result_exponential
result_weibull
source("~/.active-rstudio-document")
# Example usage
result <- reliability_test_design(
target_reliability = 0.9,
confidence_level = 0.9,
target_time = 1000,
distribution = "exponential",
sample_size = 50
)
print(result)
pkgdown::build_site_github_pages()
times <- c(80, 175, 265, 400, 590, 1100, 1650, 2010, 2400, 3380, 5100, 6400)
failures <- rep(1, 12)
failures
duane_plot(times, failures)
rga(times, failures)
result <- rga(times, failures)
plot_rga(result)
result
times <- c(100, 200, 300, 400, 500)
failures <- c(1, 2, 1, 3, 2)
result <- rga(times, failures)
plot_rga(result)
result
usethis::use_release_issue()
usethis::use_cran_comments()
usethis::use_github_links()
usethis::use_github_links(overwrite = TRUE)
urlchecker::url_check()
devtools::build_readme()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
devtools::check(remote = TRUE, manual = TRUE)
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
usethis::use_version('minor')
devtools::submit_cran()
pkgdown::build_site()
citation("segmented")
urlchecker::url_check()
devtools::check(remote = TRUE, manual = TRUE)
devtools::check_win_devel()
devtools::check_win_devel()
devtools::submit_cran()
